{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["person","props","react_default","a","createElement","className","onClick","deletePerson","clickMe","name","age","children","type","onChange","changeMe","value","App","state","persons","showPersons","togglePersons","iteratePersons","changeStateHandler","newName","_this","setState","changedStateHandler","e","target","personToggleHandler","jsxWay","jsWay","personIterateHandler","deletePersonHandler","index","splice","_this2","this","buttonStyle","backgroundColor","border","padding","borderRadius","boxShadow","fontWeight","color","fontSize","margin","Person_Person","personsList","map","style","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4820bf4f.chunk.js","sourcesContent":["import React from 'react';\nimport './Person.css' // using external style sheet\n\nconst person = (props) => { // state-less component\n    return ( \n        <div className='Person' onClick={props.deletePerson}>\n            <p onClick={props.clickMe}>I'm {props.name} and my age is {props.age} </p>  {/* binding props data dynamically and binding function refernce*/}\n            <p>{props.children}</p> {/* getting child props */}\n            <input type='text' onChange={props.changeMe} value={props.name} /> {/* two way data binding */}\n        </div>\n    );\n}\n\nexport default person;","import React, { Component } from 'react';\nimport './App.css';\nimport Person from './Person/Person'\n\nclass App extends Component { // state-full component\n  state = {\n    persons: [\n      { name: 'Dora', age: '32' },\n      { name: 'Chai', age: '33' },\n      { name: 'Hari', age: '34' }\n    ],\n    showPersons: false,\n    togglePersons: false,\n    iteratePersons: false\n  }\n\n  changeStateHandler = (newName) => {\n    this.setState({\n      persons: [\n        { name: newName, age: '32' },\n        { name: 'Chai', age: '33' },\n        { name: 'Hari', age: '33' }\n      ]\n    });\n  }\n\n  changedStateHandler = (e) => {\n    this.setState({\n      persons: [\n        { name: 'Dora Babu', age: '32' },\n        { name: e.target.value, age: '33' },\n        { name: 'Hari', age: '33' }\n      ]\n    });\n  }\n\n  personToggleHandler = (jsxWay, jsWay) => {\n    this.setState({ showPersons: jsWay });\n    this.setState({ togglePersons: jsxWay });\n  }\n\n  personIterateHandler = () => {\n    this.setState({ iteratePersons: !this.state.iteratePersons });\n  }\n\n  deletePersonHandler = (index) => { // deleting person based on array index\n    const persons = this.state.persons;\n    persons.splice(index,1)\n    this.setState({ persons: persons});\n  }\n\n\n  render() {\n\n    const buttonStyle = { // inline styiling\n      backgroundColor: 'lightblue',\n      border: 'none',\n      padding: '10px',\n      borderRadius: '5px',\n      boxShadow: '1px 2px #ccc',\n      fontWeight: 'bold',\n      color: 'navyblue',\n      fontSize: '14px',\n      margin: '20px'\n    }\n\n\n    let persons = null;\n    if (this.state.togglePersons) { // Display content statically using JS way\n      persons = (\n        <div>\n          <Person name={this.state.persons[0].name} age={this.state.persons[0].age}>My Hobbies : Cricket, Shuttle and Cooking</Person>\n          <Person name={this.state.persons[1].name} age={this.state.persons[1].age} clickMe={() => this.changeStateHandler('Dorababu')} changeMe={this.changedStateHandler} /> {/* binding click using arrow function*/}\n          <Person name={this.state.persons[2].name} age={this.state.persons[2].age} />\n        </div>\n      );\n    }\n\n    let personsList = null;\n    if (this.state.iteratePersons) { // Display content using iterator \n      personsList = (\n        <div>\n          {\n            this.state.persons.map((person, index) => {\n              return <Person name={person.name} age={person.age} deletePerson={() => this.deletePersonHandler(index)} />\n            })\n          }\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>My First React App</h1>\n        <button style={buttonStyle} onClick={this.changeStateHandler.bind(this, 'Chodisetti Dorababu')}>Change Person Name</button> {/* binding click using bind and inlie style*/}\n        <button style={buttonStyle} onClick={this.personToggleHandler.bind(this, this.state.togglePersons, !this.state.showPersons)}>Toggle Persons JSX way</button>\n        <button style={buttonStyle} onClick={this.personToggleHandler.bind(this, !this.state.togglePersons, this.state.showPersons)}>Toggle Persons JS Way</button>\n        <button style={buttonStyle} onClick={this.personIterateHandler}>Load Persons</button>\n        {this.state.showPersons ?\n          <div>\n            <Person name={this.state.persons[0].name} age={this.state.persons[0].age}>My Hobbies : Cricket, Shuttle and Cooking</Person>\n            <Person name={this.state.persons[1].name} age={this.state.persons[1].age} clickMe={() => this.changeStateHandler('Dorababu')} changeMe={this.changedStateHandler} /> {/* binding click using arrow function*/}\n            <Person name={this.state.persons[2].name} age={this.state.persons[2].age} />\n          </div> : null\n        }\n        {persons} {/* Conditional toggling  javascript way */}\n        {personsList} {/* Display content using iterator */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}