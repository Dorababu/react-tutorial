{"version":3,"sources":["containers/App.css","components/Persons/Person/Person.js","containers/App.js","serviceWorker.js","index.js","components/Persons/Person/Person.css"],"names":["module","exports","App","olive","red","green","bold","person","props","react_default","a","createElement","className","classes","Person","onClick","deletePerson","clickMe","name","age","children","type","onChange","changeMe","value","state","persons","id","showPersons","togglePersons","iteratePersons","changeStateHandler","newName","_this","setState","changedStateHandler","e","personIndex","findIndex","Object","objectSpread","target","toConsumableArray","personToggleHandler","jsxWay","jsWay","personIterateHandler","deletePersonHandler","index","splice","_this2","this","btnClass","Person_Person","personsList","map","key","assignedClasses","length","push","join","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ee2de5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__2NQx7\",\"olive\":\"App__olive__2KN9s\",\"red\":\"App__red__1UdRN\",\"green\":\"App__green__3u1Fa\",\"bold\":\"App__bold__1nqE1\"};","import React from 'react';\n//import Radium from 'radium';\nimport classes from './Person.css'; // using external style sheet\n\n\nconst person = (props) => { // state-less component\n    /*const style = {\n        '@media (min-width: 500px)' : {\n            width: '450px'\n        }\n    }; */\n    return ( \n        <div className={classes.Person} onClick={props.deletePerson}> {/* <div className='Person' onClick={props.deletePerson} style={style}> */}\n            <p onClick={props.clickMe}>I'm {props.name} and my age is {props.age} </p>  {/* binding props data dynamically and binding function refernce*/}\n            <p>{props.children}</p> {/* getting child props */}\n            <input type='text' onChange={props.changeMe} value={props.name} /> {/* two way data binding */}\n        </div>\n    );\n}\n\nexport default person;\n//export default Radium(person);","import React, { Component } from 'react';\nimport classes from './App.css';\nimport Person from '../components/Persons/Person/Person';\n//import Radium, { StyleRoot} from 'radium';\n\nclass App extends Component { // state-full component\n  state = {\n    persons: [\n      { id: '1', name: 'Dora', age: '32' },\n      { id: '2', name: 'Chai', age: '33' },\n      { id: '3', name: 'Hari', age: '34' }\n    ],\n    showPersons: false,\n    togglePersons: false,\n    iteratePersons: false\n  }\n\n  changeStateHandler = (newName) => {\n    this.setState({\n      persons: [\n        { name: newName, age: '32' },\n        { name: 'Chai', age: '33' },\n        { name: 'Hari', age: '33' }\n      ]\n    });\n  }\n\n  changedStateHandler = (e, id) => { // Dynamically update values of list\n    const personIndex = this.state.persons.findIndex(person => {\n      return person.id === id;\n    });\n    const person = {...this.state.persons[personIndex]};\n    //const person = Object.assign({},this.state.persons[personIndex]);\n    person.name = e.target.value;\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n    this.setState({\n      persons: persons\n    });\n  }\n\n  personToggleHandler = (jsxWay, jsWay) => {\n    this.setState({ showPersons: jsWay });\n    this.setState({ togglePersons: jsxWay });\n  }\n\n  personIterateHandler = () => {\n    this.setState({ iteratePersons: !this.state.iteratePersons });\n  }\n\n  deletePersonHandler = (index) => { // deleting person based on array index\n    //const persons = this.state.persons;\n    //const persons = this.state.persons.slice(); // gives a copy of object rather than reference \n    const persons = [...this.state.persons]; // gives a copy of object rather than reference \n    persons.splice(index,1) // array are reference objects so this will cause modification in original array\n    this.setState({ persons: persons});\n  }\n\n\n  render() {\n\n    /*const buttonStyle = { // inline styiling\n      backgroundColor: 'darkorange',\n      border: 'none',\n      padding: '10px',\n      borderRadius: '5px',\n      boxShadow: '4px 4px 5px #ccc',\n      fontWeight: 'bold',\n      color: 'white',\n      fontSize: '14px',\n      margin: '20px'\n      ':hover': {\n        backgroundColor: 'green',\n        cursor:'pointer'\n      }\n  }*/\n\n  let btnClass = '';\n\n\n    let persons = null;\n    if (this.state.togglePersons) { // Display content statically using JS way\n      persons = (\n        <div>\n          <Person name={this.state.persons[0].name} age={this.state.persons[0].age}>My Hobbies : Cricket, Shuttle and Cooking</Person>\n          <Person name={this.state.persons[1].name} age={this.state.persons[1].age} clickMe={() => this.changeStateHandler('Dorababu')} /> {/* binding click using arrow function*/}\n          <Person name={this.state.persons[2].name} age={this.state.persons[2].age}  />\n        </div>\n      );\n    }\n\n    let personsList = null;\n    if (this.state.iteratePersons) { // Display content using iterator \n      personsList = (\n        <div>\n          {\n            this.state.persons.map((person, index) => {\n              return <Person name={person.name} age={person.age} key={person.id} changeMe={(e) => this.changedStateHandler(e, person.id)} deletePerson={() => this.deletePersonHandler(index)} /> \n            })\n          }\n        </div>\n      );\n      // changing style dynamically\n      /*buttonStyle.backgroundColor = 'green';\n      buttonStyle[':hover'] = {\n        backgroundColor: 'darkorange',\n        cursor:'pointer'\n      }*/\n      btnClass = classes.olive;\n    }\n\n    const assignedClasses = [];\n    if(this.state.persons.length === 3) {\n      assignedClasses.push(classes.green);\n    }\n    if(this.state.persons.length <= 2) {\n      assignedClasses.push(classes.red);\n    }\n    if(this.state.persons.length <= 1) {\n      assignedClasses.push(classes.bold);\n    }\n\n    return (\n      /*<StyleRoot>*/\n        <div className={classes.App}>\n          {/* <h1 className={assignedClasses.join(' ')}>React Tutorial</h1>\n          <button style={buttonStyle} onClick={this.changeStateHandler.bind(this, 'Chodisetti Dorababu')} key='changeName'>Change Person Name</button> // binding click using bind and inlie style\n          <button style={buttonStyle} onClick={this.personToggleHandler.bind(this, this.state.togglePersons, !this.state.showPersons)} key='loadPersonsJSX'>Toggle Persons JSX way</button>\n          <button style={buttonStyle} onClick={this.personToggleHandler.bind(this, !this.state.togglePersons, this.state.showPersons)} key='loadPersonsJS'>Toggle Persons JS Way</button>\n          <button style={buttonStyle} onClick={this.personIterateHandler} key='loadPersons'>Load Persons</button> */}\n          <h1 className={assignedClasses.join(' ')}>React Tutorial</h1>\n          <button className={btnClass} onClick={this.changeStateHandler.bind(this, 'Chodisetti Dorababu')} key='changeName'>Change Person Name</button> \n          <button className={btnClass} onClick={this.personToggleHandler.bind(this, this.state.togglePersons, !this.state.showPersons)} key='loadPersonsJSX'>Toggle Persons JSX way</button>\n          <button className={btnClass} onClick={this.personToggleHandler.bind(this, !this.state.togglePersons, this.state.showPersons)} key='loadPersonsJS'>Toggle Persons JS Way</button>\n          <button className={btnClass} onClick={this.personIterateHandler} key='loadPersons'>Load Persons</button> \n          \n          {this.state.showPersons ?\n            <div>\n              <Person name={this.state.persons[0].name} age={this.state.persons[0].age}>My Hobbies : Cricket, Shuttle and Cooking</Person>\n              <Person name={this.state.persons[1].name} age={this.state.persons[1].age} clickMe={() => this.changeStateHandler('Dorababu')} /> {/* binding click using arrow function*/}\n              <Person name={this.state.persons[2].name} age={this.state.persons[2].age} />\n            </div> : null\n          }\n          {persons} {/* Conditional toggling  javascript way */}\n          {personsList} {/* Display content using iterator */}\n        </div>\n      /*</StyleRoot>*/\n    );\n  }\n}\n\nexport default App;\n//export default Radium(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person__Person__37wpp\",\"red\":\"Person__red__2jflS\",\"green\":\"Person__green__WOPA0\",\"bold\":\"Person__bold__uw21c\"};"],"sourceRoot":""}